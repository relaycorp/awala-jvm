{
  
  "0": {
    "title": "Implementing a courier",
    "content": "Implementing a courier . If you’re implementing a courier, you’ll only need a very small subset of this library. . Processing RAMF messages . You’ll need the Cargo and CargoCollectionAuthorization (CCA) classes to deserialize and inspect their corresponding RAMF messages. . It is important to call the validate() method on any RAMF message received from any external source. Deserializing RAMF messages only proves that they are syntactically valid, but they may still be invalid (e.g., the message might’ve been created after the sender’s certificate expired). . Delivering cargo . When delivering cargo to a public gateway via a cargo relay implementation (e.g., CogRPC), you’ll need to pass CargoRelayRequest instances to it so that you can track and delete cargo as it’s safely delivered to the gateway. . The actual way to pass such instances will depend entirely on the cargo relay library, so make sure it read its documentation. . Example . To see this library in action in a courier implementation, check out how the Relaynet Courier by Relaycorp. .",
    "url": "/awala-jvm/couriers",
    "relUrl": "/couriers"
  }
  ,"1": {
    "title": "Implementing a gateway",
    "content": "Implementing a gateway . TODO: Write up after implementing https://github.com/relaycorp/relaynet-gateway-android so we can reuse code snippets .",
    "url": "/awala-jvm/howto-gateway.html",
    "relUrl": "/howto-gateway.html"
  }
  ,"2": {
    "title": "Implementing a service",
    "content": "Implementing a service . TODO: Write this section up when the Android Ping has been built, so we can refer to the final API .",
    "url": "/awala-jvm/howto-service.html",
    "relUrl": "/howto-service.html"
  }
  ,"3": {
    "title": "Relaynet JVM",
    "content": "Relaynet JVM Library . This library implements the core of Relaynet and is meant to be used in any software using the network on the JVM – including Android and server-side apps. . Please note that this documentation is mostly incomplete because the interface exposed by this library is changing rapidly as of this writing. Also note that the examples in this documentation won’t work until a gateway (e.g., the Android Gateway) has been implemented. We expect the library to reach a stable status and its documentation to be completed by the end of Q1 2020. . Install . This library runs on Java 8+ and is available on JCenter. To install it via Gradle, use: . implementation &#39;tech.relaycorp:relaynet:1.+&#39; . Use . This library can be used for different purposes, so please refer to the documentation for your specific use case: . Most people will be interested in adding Relaynet support to their app, whether the app is pre-existing or is being built from scratch. . Relaycorp provides implementations for gateways and couriers, so if you’re contributing to those implementations or for whatever reason you’d like to build your own, please refer to the follow documents: . Implementing a gateway. | Implementing a courier. | . Read API documentation. . Specs supported . This library supports the following Relaynet specs: . RS-000 (Relaynet Core). | RS-001 (RAMF v1). | RS-002 (Relaynet PKI). | RS-003 (Relaynet Channel Session Protocol). | RS-018 (Relaynet Cryptographic Algorithms, Version 1). In addition to the required algorithms, the following are supported: Hashing functions: SHA-384 and SHA-512. | Ciphers: AES-192 and AES-256. | . | . Support . If you have any questions or comments, create an issue on the GitHub project. . Updates . Releases are automatically published on GitHub and JCenter, and the changelog can be found on GitHub. This project uses semantic versioning. .",
    "url": "/awala-jvm/",
    "relUrl": "/"
  }
  
}